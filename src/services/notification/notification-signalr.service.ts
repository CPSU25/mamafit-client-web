import * as signalR from '@microsoft/signalr'
import { useAuthStore } from '@/lib/zustand/use-auth-store'
import { 
  NotificationResponseDto
} from '@/@types/notification.types'

export class NotificationSignalRService {
  private connection: signalR.HubConnection | null = null
  private isConnecting = false
  private listeners: Map<string, ((...args: unknown[]) => void)[]> = new Map()

  constructor() {
    console.log('üîß Notification SignalR Service ƒë∆∞·ª£c kh·ªüi t·∫°o')
  }

  // B∆∞·ªõc 1: T·∫°o connection
  private createConnection(): signalR.HubConnection {
    const baseURL = import.meta.env.VITE_HUB_URL

    if (!baseURL) {
      throw new Error('VITE_API_NOTIFICATION_HUB ho·∫∑c VITE_API_BASE_URL kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong environment')
    }

    const connection = new signalR.HubConnectionBuilder()
      .withUrl(`${baseURL}/notificationHub`, {
        accessTokenFactory: () => {
          const authStore = useAuthStore.getState()
          const token = authStore.accessToken || ''
          return token
        },
        transport: signalR.HttpTransportType.WebSockets,
        skipNegotiation: false,
        withCredentials: false
      })
      .withAutomaticReconnect()
      .configureLogging(signalR.LogLevel.Information)
      .build()

    return connection
  }

  // B∆∞·ªõc 2: Connect t·ªõi SignalR Hub
  async connect(): Promise<void> {
    if (this.isConnecting) {
      console.log('‚è≥ ƒêang trong qu√° tr√¨nh k·∫øt n·ªëi notification hub, b·ªè qua y√™u c·∫ßu m·ªõi')
      return
    }

    if (this.connection?.state === signalR.HubConnectionState.Connected) {
      console.log('‚úÖ ƒê√£ k·∫øt n·ªëi notification hub r·ªìi, kh√¥ng c·∫ßn k·∫øt n·ªëi l·∫°i')
      return
    }

    try {
      this.isConnecting = true
      console.log('üöÄ B·∫Øt ƒë·∫ßu k·∫øt n·ªëi Notification SignalR...')

      // T·∫°o connection m·ªõi n·∫øu ch∆∞a c√≥
      if (!this.connection) {
        this.connection = this.createConnection()
        this.setupEventListeners()
      }

      // K·∫øt n·ªëi
      await this.connection.start()
      console.log('üéâ K·∫øt n·ªëi Notification SignalR th√†nh c√¥ng!')
    } catch (error) {
      console.error('‚ùå L·ªói khi k·∫øt n·ªëi Notification SignalR:', error)
      throw error
    } finally {
      this.isConnecting = false
    }
  }

  // B∆∞·ªõc 3: Setup event listeners
  private setupEventListeners(): void {
    if (!this.connection) return

    // Nh·∫≠n notification m·ªõi
    this.connection.on('ReceiveNotification', (notification: NotificationResponseDto) => {
      console.log('üîî Received new notification:', notification)
      this.emit('ReceiveNotification', notification)
    })

    // Nh·∫≠n s·ªë l∆∞·ª£ng notification ch∆∞a ƒë·ªçc
    this.connection.on('UnreadNotificationCount', (count: number) => {
      console.log('üìä Unread notification count:', count)
      this.emit('UnreadNotificationCount', count)
    })

    // Notification ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc
    this.connection.on('NotificationMarkedAsRead', (notificationId: string) => {
      console.log('‚úÖ Notification marked as read:', notificationId)
      this.emit('NotificationMarkedAsRead', notificationId)
    })

    // Danh s√°ch notifications
    this.connection.on('UserNotifications', (notifications: NotificationResponseDto[]) => {
      console.log('üìã User notifications loaded:', notifications)
      this.emit('UserNotifications', notifications)
    })

    // L·ªói t·ª´ server
    this.connection.on('Error', (errorMessage: string) => {
      console.error('‚ùå L·ªói t·ª´ notification server:', errorMessage)
      this.emit('Error', errorMessage)
    })

    console.log('üì° Notification event listeners ƒë√£ ƒë∆∞·ª£c setup')
  }

  // B∆∞·ªõc 4: L·∫•y danh s√°ch notifications v·ªõi ph√¢n trang
  async getUserNotifications(index: number = 1, pageSize: number = 10): Promise<void> {
    if (!this.connection) {
      throw new Error('Ch∆∞a c√≥ connection. H√£y g·ªçi connect() tr∆∞·ªõc')
    }

    if (this.connection.state !== signalR.HubConnectionState.Connected) {
      throw new Error(`Connection ch∆∞a s·∫µn s√†ng. State hi·ªán t·∫°i: ${this.connection.state}`)
    }

    try {
      console.log('üìã ƒêang l·∫•y danh s√°ch notifications:', { index, pageSize })
      await this.connection.invoke('GetUserNotifications', index, pageSize)
      console.log('‚úÖ Y√™u c·∫ßu l·∫•y notifications ƒë√£ ƒë∆∞·ª£c g·ª≠i')
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y notifications:', error)
      throw error
    }
  }

  // B∆∞·ªõc 5: ƒê√°nh d·∫•u notification l√† ƒë√£ ƒë·ªçc
  async markNotificationAsRead(notificationId: string): Promise<void> {
    if (!this.connection) {
      throw new Error('Ch∆∞a c√≥ connection. H√£y g·ªçi connect() tr∆∞·ªõc')
    }

    if (this.connection.state !== signalR.HubConnectionState.Connected) {
      throw new Error(`Connection ch∆∞a s·∫µn s√†ng. State hi·ªán t·∫°i: ${this.connection.state}`)
    }

    if (!notificationId || notificationId.trim() === '') {
      throw new Error('Notification ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    }

    try {
      console.log('‚úÖ ƒêang ƒë√°nh d·∫•u notification l√† ƒë√£ ƒë·ªçc:', notificationId)
      await this.connection.invoke('MarkNotificationAsRead', notificationId.trim())
      console.log('‚úÖ ƒê√£ ƒë√°nh d·∫•u notification l√† ƒë√£ ƒë·ªçc')
    } catch (error) {
      console.error('‚ùå L·ªói khi ƒë√°nh d·∫•u notification l√† ƒë√£ ƒë·ªçc:', error)
      throw error
    }
  }

  // B∆∞·ªõc 6: L·∫•y s·ªë l∆∞·ª£ng notification ch∆∞a ƒë·ªçc
  async getUnreadNotificationCount(): Promise<void> {
    if (!this.connection) {
      throw new Error('Ch∆∞a c√≥ connection. H√£y g·ªçi connect() tr∆∞·ªõc')
    }

    if (this.connection.state !== signalR.HubConnectionState.Connected) {
      throw new Error(`Connection ch∆∞a s·∫µn s√†ng. State hi·ªán t·∫°i: ${this.connection.state}`)
    }

    try {
      console.log('üìä ƒêang l·∫•y s·ªë l∆∞·ª£ng notification ch∆∞a ƒë·ªçc...')
      await this.connection.invoke('GetUnreadNotificationCount')
      console.log('‚úÖ Y√™u c·∫ßu l·∫•y unread count ƒë√£ ƒë∆∞·ª£c g·ª≠i')
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y unread count:', error)
      throw error
    }
  }

  // Event handling methods (gi·ªëng nh∆∞ chat service)
  on(event: string, callback: (...args: unknown[]) => void): void {
    if (!this.listeners.has(event)) {
      this.listeners.set(event, [])
    }
    this.listeners.get(event)!.push(callback)
  }

  off(event: string, callback: (...args: unknown[]) => void): void {
    const eventListeners = this.listeners.get(event)
    if (eventListeners) {
      const index = eventListeners.indexOf(callback)
      if (index > -1) {
        eventListeners.splice(index, 1)
      }
    }
  }

  private emit(event: string, ...args: unknown[]): void {
    const eventListeners = this.listeners.get(event)
    if (eventListeners) {
      eventListeners.forEach(callback => {
        try {
          callback(...args)
        } catch (error) {
          console.error(`‚ùå L·ªói trong event listener cho event '${event}':`, error)
        }
      })
    }
  }

  // Utility methods
  get isConnected(): boolean {
    return this.connection?.state === signalR.HubConnectionState.Connected
  }

  get connectionState(): string {
    return this.connection?.state?.toString() || 'No Connection'
  }

  async disconnect(): Promise<void> {
    if (this.connection) {
      console.log('üîå ƒêang ng·∫Øt k·∫øt n·ªëi Notification SignalR...')
      await this.connection.stop()
      console.log('‚úÖ ƒê√£ ng·∫Øt k·∫øt n·ªëi notification hub')
    }
  }

  // Cleanup
  destroy(): void {
    this.listeners.clear()
    if (this.connection) {
      this.connection.stop()
      this.connection = null
    }
  }
}

// Singleton instance
export const notificationSignalRService = new NotificationSignalRService() 