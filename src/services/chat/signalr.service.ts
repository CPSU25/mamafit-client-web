import * as signalR from '@microsoft/signalr'
import { useAuthStore } from '@/lib/zustand/use-auth-store'

// Types
interface ChatMessage {
  id: string
  message: string
  senderId: string
  senderName: string
  chatRoomId: string
  timestamp: string
  type: number
}

export class SignalRService {
  private connection: signalR.HubConnection | null = null
  private isConnecting = false
  private listeners: Map<string, ((...args: unknown[]) => void)[]> = new Map()

  constructor() {
    console.log('üîß SignalR Service ƒë∆∞·ª£c kh·ªüi t·∫°o')
  }

  // B∆∞·ªõc 1: T·∫°o connection
  private createConnection(): signalR.HubConnection {
    const baseURL = import.meta.env.VITE_API_CHAT_HUB

    if (!baseURL) {
      throw new Error('VITE_API_CHAT_HUB kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong environment')
    }

    const connection = new signalR.HubConnectionBuilder()
      .withUrl(`${baseURL}/chatHub`, {
        accessTokenFactory: () => {
          const authStore = useAuthStore.getState()
          const token = authStore.accessToken || ''
          return token
        },
        transport: signalR.HttpTransportType.WebSockets,
        skipNegotiation: false,
        withCredentials: false
      })
      .withAutomaticReconnect()
      .configureLogging(signalR.LogLevel.Information)
      .build()

    return connection
  }

  // B∆∞·ªõc 2: Connect t·ªõi SignalR Hub
  async connect(): Promise<void> {
    if (this.isConnecting) {
      console.log('‚è≥ ƒêang trong qu√° tr√¨nh k·∫øt n·ªëi, b·ªè qua y√™u c·∫ßu m·ªõi')
      return
    }

    if (this.connection?.state === signalR.HubConnectionState.Connected) {
      console.log('‚úÖ ƒê√£ k·∫øt n·ªëi r·ªìi, kh√¥ng c·∫ßn k·∫øt n·ªëi l·∫°i')
      return
    }

    try {
      this.isConnecting = true
      console.log('üöÄ B·∫Øt ƒë·∫ßu k·∫øt n·ªëi SignalR...')

      // T·∫°o connection m·ªõi n·∫øu ch∆∞a c√≥
      if (!this.connection) {
        this.connection = this.createConnection()
        this.setupEventListeners()
      }

      // K·∫øt n·ªëi
      await this.connection.start()
      console.log('üéâ K·∫øt n·ªëi SignalR th√†nh c√¥ng!')
    } catch (error) {
      console.error('‚ùå L·ªói khi k·∫øt n·ªëi SignalR:', error)
      throw error
    } finally {
      this.isConnecting = false
    }
  }

  // B∆∞·ªõc 3: Setup event listeners c∆° b·∫£n
  private setupEventListeners(): void {
    if (!this.connection) return

    // Message Events
    this.connection.on('ReceiveMessage', (message: ChatMessage) => {
      this.emit('ReceiveMessage', message)
    })

    this.connection.on('MessageHistory', (roomId: string, messages: ChatMessage[]) => {
      this.emit('MessageHistory', roomId, messages)
    })

    // Room Events
    this.connection.on('RoomCreated', (roomId: string) => {
      console.log('üè† Room ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:', roomId)
      this.emit('RoomCreated', roomId)
    })

    this.connection.on('Error', (errorMessage: string) => {
      console.error('‚ùå L·ªói t·ª´ server:', errorMessage)
      this.emit('Error', errorMessage)
    })

    // Load Room Events
    this.connection.on('LoadRoom', (rooms: unknown[]) => {
      console.log('üìÇ Rooms ƒë∆∞·ª£c load th√†nh c√¥ng:', rooms)
      this.emit('LoadRoom', rooms)
    })

    this.connection.on('NoRooms', (message: string) => {
      console.log('üì≠ Kh√¥ng c√≥ rooms:', message)
      this.emit('NoRooms', message)
    })

    this.connection.on('NoMessages', (message: string) => {
      console.log('üì≠ Kh√¥ng c√≥ tin nh·∫Øn:', message)
      this.emit('NoMessages', message)
    })

    console.log('Event listeners ƒë√£ ƒë∆∞·ª£c setup')
  }

  // B∆∞·ªõc 4: Join room
  async joinRoom(roomId: string): Promise<void> {
    if (!this.connection) {
      throw new Error('Ch∆∞a c√≥ connection. H√£y g·ªçi connect() tr∆∞·ªõc')
    }

    if (this.connection.state !== signalR.HubConnectionState.Connected) {
      throw new Error(`Connection ch∆∞a s·∫µn s√†ng. State hi·ªán t·∫°i: ${this.connection.state}`)
    }

    if (!roomId || roomId.trim() === '') {
      throw new Error('Room ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    }

    try {
      console.log('üè† ƒêang join room:', roomId)
      await this.connection.invoke('JoinRoom', roomId.trim())
      console.log('‚úÖ ƒê√£ join room th√†nh c√¥ng:', roomId)
    } catch (error) {
      console.error('‚ùå L·ªói khi join room:', error)
      throw error
    }
  }

  // B∆∞·ªõc 5: G·ª≠i tin nh·∫Øn
  async sendMessage(roomId: string, message: string): Promise<void> {
    if (!this.connection) {
      throw new Error('Ch∆∞a c√≥ connection. H√£y g·ªçi connect() tr∆∞·ªõc')
    }

    if (this.connection.state !== signalR.HubConnectionState.Connected) {
      throw new Error(`Connection ch∆∞a s·∫µn s√†ng. State hi·ªán t·∫°i: ${this.connection.state}`)
    }

    if (!roomId || roomId.trim() === '') {
      throw new Error('Room ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    }

    if (!message || message.trim() === '') {
      throw new Error('Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    }

    try {
      console.log('üí¨ ƒêang g·ª≠i tin nh·∫Øn:', { roomId, message })

      const messageDto = {
        Message: message.trim(),
        ChatRoomId: roomId.trim(),
        Type: 0 // 0 = Text message
      }

      await this.connection.invoke('SendMessage', messageDto)
      console.log('‚úÖ G·ª≠i tin nh·∫Øn th√†nh c√¥ng')
    } catch (error) {
      console.error('‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:', error)
      throw error
    }
  }

  // B∆∞·ªõc 6: T·∫°o room chat gi·ªØa 2 users
  async createRoom(userId1: string, userId2: string): Promise<void> {
    if (!this.connection) {
      throw new Error('Ch∆∞a c√≥ connection. H√£y g·ªçi connect() tr∆∞·ªõc')
    }

    if (this.connection.state !== signalR.HubConnectionState.Connected) {
      throw new Error(`Connection ch∆∞a s·∫µn s√†ng. State hi·ªán t·∫°i: ${this.connection.state}`)
    }

    if (!userId1 || userId1.trim() === '') {
      throw new Error('User ID 1 kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    }

    if (!userId2 || userId2.trim() === '') {
      throw new Error('User ID 2 kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    }

    if (userId1.trim() === userId2.trim()) {
      throw new Error('Kh√¥ng th·ªÉ t·∫°o room chat v·ªõi ch√≠nh m√¨nh')
    }

    try {
      console.log('üèóÔ∏è ƒêang t·∫°o room chat:', { userId1, userId2 })
      await this.connection.invoke('CreateRoom', userId1.trim(), userId2.trim())
      console.log('‚úÖ Y√™u c·∫ßu t·∫°o room ƒë√£ ƒë∆∞·ª£c g·ª≠i')
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o room:', error)
      throw error
    }
  }

  // B∆∞·ªõc 7: Load danh s√°ch chat rooms c·ªßa user hi·ªán t·∫°i
  async loadRoom(): Promise<void> {
    if (!this.connection) {
      throw new Error('Ch∆∞a c√≥ connection. H√£y g·ªçi connect() tr∆∞·ªõc')
    }

    if (this.connection.state !== signalR.HubConnectionState.Connected) {
      throw new Error(`Connection ch∆∞a s·∫µn s√†ng. State hi·ªán t·∫°i: ${this.connection.state}`)
    }

    try {
      console.log('üìÇ ƒêang load danh s√°ch rooms...')
      await this.connection.invoke('LoadRoom')
      console.log('‚úÖ Y√™u c·∫ßu load rooms ƒë√£ ƒë∆∞·ª£c g·ª≠i')
    } catch (error) {
      console.error('‚ùå L·ªói khi load rooms:', error)
      throw error
    }
  }

  // B∆∞·ªõc 8: Load tin nh·∫Øn l·ªãch s·ª≠ qua SignalR
  async loadMessageHistory(roomId: string, pageSize: number = 20, page: number = 1): Promise<void> {
    if (!this.connection) {
      throw new Error('Ch∆∞a c√≥ connection. H√£y g·ªçi connect() tr∆∞·ªõc')
    }

    if (this.connection.state !== signalR.HubConnectionState.Connected) {
      throw new Error(`Connection ch∆∞a s·∫µn s√†ng. State hi·ªán t·∫°i: ${this.connection.state}`)
    }

    if (!roomId || roomId.trim() === '') {
      throw new Error('Room ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    }

    if (pageSize <= 0) {
      throw new Error('Page size ph·∫£i l·ªõn h∆°n 0')
    }

    if (page <= 0) {
      throw new Error('Page ph·∫£i l·ªõn h∆°n 0')
    }

    try {
      console.log('üìú ƒêang load tin nh·∫Øn l·ªãch s·ª≠ (SignalR):', { roomId, pageSize, page })
      await this.connection.invoke('LoadMessageHistory', roomId.trim(), pageSize, page)
      console.log('‚úÖ Y√™u c·∫ßu load tin nh·∫Øn l·ªãch s·ª≠ ƒë√£ ƒë∆∞·ª£c g·ª≠i')
    } catch (error) {
      console.error('‚ùå L·ªói khi load tin nh·∫Øn l·ªãch s·ª≠ (SignalR):', error)
      throw error
    }
  }

  // Legacy method - Keep for backward compatibility but prefer loadMessageHistory
  async loadMessages(roomId: string, pageSize: number = 20, page: number = 1): Promise<void> {
    console.log('‚ö†Ô∏è loadMessages() is deprecated, using loadMessageHistory() instead')
    return this.loadMessageHistory(roomId, pageSize, page)
  }

  // Utility methods
  get isConnected(): boolean {
    return this.connection?.state === signalR.HubConnectionState.Connected
  }

  get connectionState(): string {
    return this.connection?.state?.toString() || 'No Connection'
  }

  async disconnect(): Promise<void> {
    if (this.connection) {
      console.log('üîå ƒêang ng·∫Øt k·∫øt n·ªëi SignalR...')
      await this.connection.stop()
      console.log('‚úÖ ƒê√£ ng·∫Øt k·∫øt n·ªëi')
    }
  }

  // Event Management
  on(event: string, callback: (...args: unknown[]) => void): void {
    if (!this.listeners.has(event)) {
      this.listeners.set(event, [])
    }
    this.listeners.get(event)!.push(callback)
  }

  off(event: string, callback: (...args: unknown[]) => void): void {
    const eventListeners = this.listeners.get(event)
    if (eventListeners) {
      const index = eventListeners.indexOf(callback)
      if (index > -1) {
        eventListeners.splice(index, 1)
      }
    }
  }

  private emit(event: string, ...args: unknown[]): void {
    const eventListeners = this.listeners.get(event)
    if (eventListeners) {
      eventListeners.forEach((callback) => callback(...args))
    }
  }
}

// Singleton instance
export const signalRService = new SignalRService()
